### Intro to basics
### Arithmetic with R

Addition: +
Subtraction: -
Multiplication: *
Division:  /    
Exponentiation: ^ (the ^ operator raises the number to its right: for example 3^2 is 9)
Modulo: %% (the modulo returns the remainder of the division of the number to the left by the number on its right: for example 5 %% 3 is 2)

### Variable Assignment

A variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R. You can then later use this variable's name to easily access the value or the object that is stored within this variable.

You can assign a value 4 to a variable my_var with the command: my_var ← 4

### Basic data types in R

R works with numerous data types. Some of the most basic types are:

- Decimal values like 4.5 are called **numerics**
- Whole numbers like 4 are called **integers.** Integers are also numerics
- Boolean values (TRUE or FALSE) are called **logical**
- Text (or string) values are called **characteristics**

### What's the data type?

To check the data type of a variable you can use the class() function.

### Vectors
### Create a vector

This chapter will show how you can easily keep track of your betting progress and how you can do some simple analyses on past actions.

Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos.

In R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses. For example:

numeric_vector ← c(1, 10, 49)

character_vector ← c("a", "b", "c")

### Naming a vector

As a data analyst, it is important to have a clear view of the data that you are using. Understanding what each element refers to is therefore essential.

You can give a name to the elements of a vector with the names() function.

For example:

some_vector ← c("John Doe", "poker player")

names(some_vector) ← c("Name", "Profession")

This code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labelled Profession.

### Calculating total winnings

If you sum two vectors in R, it takes the element-wise sum.

For example, the following three statements are completely equivalent:

c(1, 2, 3) + c(4, 5, 6)

c(1+4, 2+5, 3+6)

c(5, 7, 9)

You can also do the calculations with variables that represent vectors:

a ← c(1, 2, 3)

b ← c(4, 5, 6)

c ← a + b

sum() function calculates the sum of all elements of a vector. For example, to calculate the total amount of money you have lost/won with poker you do:

total_poker ← sum(poker_vector)

### Vector selection

To select elements of a vector (and later matrices, data frames, ...), you can use square brackets. Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type poker_vector[1].

To select the second element of the vector, you type poker_vector[2].

Notice that the first element in a vector has index 1, not - as in many other programming languages.

To select multiple elements from a vector, you can add square brackets at the end of it. You can indicate between the brackets what elements should be selected.

For example: suppose you want to select the first and fifth day of the week: use the vector c(1, 5) between the square brackets.

For example, the code below selects the first and fifth element of poker_vector:

poker_vector[c(1, 5)]

Selecting multiple elements of poker_vector with c(2, 3, 4) is not very convenient. Many statisticians are lazy people by nature, so they created an easier way to do this: c(2, 3, 4) can be abbreviated to 2:4, which generates a vector with all natural numbers from 2 up to 4.

So, another way to find the mid-week results is poker_vector[2:4].

### Select by comparison

By making use of comparison operators, we can approach the previous question in a more proactive way.

The (logical) comparison operators known to R are:

- < for less than
- > for greater than
- <= for less than or equal to
- >= for greater than or equal to
- == for equal to each other
- != for not equal to each other

As seen in the previous chapter, stating 6>5 returns TRUE.

The nice thing about R is that you can use these comparison operators also on vectors. For example:

c(4, 5, 6) > 5

[1] FALSE FALSE TRUE

This command tests for every element of the vector if the condition stated by the comparison operator is TRUE or FALSE.

In the previous exercises you used selection_vector ← poker_vector > 0 to find the days on which you had a positive poker return. Now, you would like to know not only the days on which you won, but also how much you won on those days.

You can select the desired elements, by putting selection_vector between the square brackets that follow poker_vector:

poker_vector[selection_vector]

R knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to TRUE in selection_vector.

### Matrices
### What's a matrix?

In R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. Since you are only working with rows and columns, a matrix is called two-dimensional.

You can construct a matrix in R with the matrix() function. For example:

matrix(1:9, byrow = TRUE, nrow = 3)

In the matrix() function:

- The first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9)
- The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow=FALSE.
- The third argument nrow indicates that the matrix should have three rows.

### Naming a matrix

Similar to vectors, you can add names for the rows and the columns of a matrix:

rownames(my_matrix) ← row_names_vector

colnames(my_matrix) ← col_names_vector

### Calculating the Sum

In R, the function rowSums() conentiently calculates the totals for each row of a matrix.

This function creates a new vector:

rowSums(my_matrix)

### Adding a Column

You can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. For example:

big_matrix ← cbind(matrix1, matrix2, vector1 ...)

### Adding a Row

Just like every action has a reaction, every cbind() has an rbind(). 

Your R workspace, where all variables you defined 'live' (check out what a workspace is), has already been initialised and contains two matrices:

- star_wars_matrix that we have used all along, with data on the original trilogy,
- star_wars_matrix2, with similar data for the prequels trilogy

If you want to check out the contents of the workspace, you can type ls() in the console.

### Total Sum

Just like cbind() has rbind(), colSums() has rowSums(). 

### Selection of matrix elements

Similar to vectors, you can use the square brackets [] to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate the rows you want to select from the columns. For example:

- my_matrix[1,2] selects the element at the first row and second column
- my_matrix[1:3, 2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.

If you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:

- my_matrix[,1] selects all elements of the first column
- my_matrix[1,] selects all elements of the first row

### A little arithmetic with matrices

Similar to what you have learned with vectors, the standard operators like +, -, /, *, etc. work in an element-wise way on matrices in R.

For example, 2 * my_matrix multiplies each element of my_matrix by two.

Just like this, my_matrix * my_matrix2 creates a matrix where each element is the product of the corresponding elements in my_matrix1 and my_matrix2.

### Factors
### What's a factor and why would you use it?

The term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.

It is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently.

A good example of a categorical variable is sex. In many circumstances you can limit the sex categories to 'Male' or 'Female'.(sometimes you may need different categories. For example, you may need to consider chromosomal variation, hermaphoditic animals, or different cultural norms, but you will always have a finite number of categories).

To create factors in R, you make use of the function factor(). First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. For example. sex_vector contains the sex of 5 different individuals:

sex_vector ← c("Male", "Female", "Female", "Male", "Male")

It is clear that there are two categories, or in R-terms 'factor levels' at work here: "Male" and "Female".

The function factor() will encode the vector as a factor: 

factor_sex_vector ← factor(sex_vector)

If you want to find out more, you can type ?factor in the console.

There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.

A nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'. For example, think of the categorical variable animals_vector with the categories "Elephant", "Giraffe", "Donkey" and "Horse". Here, it is impossible to say that one stands above or below the other.

In contrast, ordinal variables do have a natural ordering. Considering for example the categorical variable temperature_vector with the categories: "Low", "Medium" and "High". Here it is obvious that "Medium" stands above "Low" and "High" stands above "Medium".

 

### Factor levels

When you first get a data set, you will often notice that it contains factors with specific factor levels. However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function levels(): 

levels(factor_vector) ← c("name1", "name2",...)

A good illustration is the raw data that is provided to you by a survey. A common question for every questionnaire is the sex of the respondent. Here, for simplicity, just two categories were recorded, "M" and "F".

survey_vector ← c("M", "F", "F", "M", "M")

Recording the sex with the abbreviations "M" and "F" can be convenient if you are collecting data with pen and paper, but it can introduce confusion when analysing the data. At that point, you will often want to change the factor levels to "Male" instead of "M" for clarity.

Watch out! The order with which you assign the levels is important. If you type levels(factor_survey_vector), you'll see that it outputs [1] "F" "M". 

If you don't specify the levels of the factor when creating the vector, R will automatically assign them alphabetically.

To correctly map "F" to "Female" and "M" to "Male", the levels should be set to c("Female", "Male", in this order.

### Summarising a factor

summary() function gives you a quick overview of the contents of a variable:

summary(my_var)

Going back to the survey, you'd like to know how many "Male" responses you have in your study, and how many "Female" responses. The summary() function gives you that.

 

### Ordered factors

Since "Male" and "Female" are unordered (or nominal) factor levels, R returns a warning message, telling you that the greater than operator is not meaningful. As seen before, R attaches an equal value to the levels for such factors.

But this is not always the case! Sometimes you will also deal with factors that do have a natural ordering between its categories. If this is the case, we have to make sure that we pass this information to R..

speed_vector should be converted to an ordinal factor since its categories have a natural ordering. By default, the function factor() transforms speed_vector into an unordered factor. To create an ordered factor, you have to add two additional arguments ordered and levels.

factor(some_vector,

 ordered = TRUE,

levels = c("lev1", "lev2" ...)

By setting the argument ordered to TRUE in the function factor(), you indicate that the factor is ordered. With the argument levels you give the values of the factor in the correct order.

### Comparing ordered factors

The fact that factor_speed_vector is now ordered enables us to compare different elements.

### Data Frames
### What's a data frame?

You may remember from the chapter about matrices that all the elements that you put in a matrix should be of the same type.

When doing a market research survey, you often have questions such as:

- 'Are you married?' or 'yes/no' questions (logical)
- 'How old are you?' (numeric)
- 'What is your opinion about..?' or other 'open-ended' questions (character)
- ...

The output, namely the respondents' answers to the questions formulated above, is a data set of different data types. You will often find yourself working with data sets that contain different data types instead of only one.

A data frame has the variables of a dataset as columns and the observations as rows.

Working with large data sets is not uncommon in data analysis. When you work with (extremely) large data sets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire data set.

The function head() enables you to show the first observations of a data frame. Similarly, the function tail() prints out the last observations in your data set.

Both head() and tail() print a top line called the 'header', which contains the names of the different variables in your data set.

### Structure

Another method that is often used to get a rapid overview of your data is the function str(). The function str() shows you the structure of your dataset.

For a dataframe it tells you:

- The total number of observations (e.g. 32 car types)
- The total number of variables (e.g. 11 car features)
- A full list of the variables names (e.g. mpg, cyl ....)
- The data type of each variable (e.g. num)
- The first observations

Applying the str() function will often be the first thing that you do when receiving a new dataset or dataframe. It is a great way to get more insight in your dataset before diving into the real analysis.

### Creating a dataframe

Since using built-in datasets is not even half the fun of creating your own data sets, the rest of this chapter is based on your personally developed dataset.

As a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. The main features of a planet are:

- The type of planet
- The planet's diameter relative to the diameter of the Earth
- The planet's rotation across the sun relative to that of the Earth
- If the planet has rings or not (TRUE or FALSE)

After doing some research, you feel confident enough to create the necessary vectors: name, type, diameter, rotation and rings; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.

You construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don't forget that it is possible that they contain different types of data.

### Selection of data frame elements

Similar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. By using a comma, you can indicate what to select from the rows and the columns respectively.

For example:

- my_df[1,2] selects the value at the first row and second column in my_df
- my_df[1:3, 2:4] selects rows 1,2,3 and columns 2,3,4 in my_df

Sometimes you want to select all elements of a row or column. For example, my_df[1,] selects all elements of the first row. 

Instead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame.

Suppose you want to select the first three elements of the type column. One way to do this is:

planets_df[1:3, 2]

A possible disadvantage of this approach is that you have to know the column number of type, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:

planets_df[1:3, "type"]

 

### Select specific elements

You will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable diameter, for example, both of these will do the trick:

planets_df[,3]

planets_df[,"diameter"]

However, there is a shortcut. If your columns have names, you can use the $ sign:

planets_df$diameter

### Subset

You should see the subset() function as a short-cut to do exactly the same as what you did before.

subset(my_df, subset = some_condition)

The first argument of subset() specifies which dataset for which you want a subset. By adding a second argument, you give R the necessary information and conditions to select the correct subset.

The code below will give the exact same result as you got in the previous exercise, but this time you don't need the rings_vector:

subset(planets_df, subset = rings)

 

### Sorting

In data analysis you can sort your data according to a certain variable in the dataset. In R, this can be done with the help of the function order().

order() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:

a ← c(100, 10, 1000)

order(a)

[1] 2 1 3

10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a).

This means we can use the output of order(a) to reshuffle a:

a[order(a)]

[1] 10 100 1000

### Lists
A list in R is similar to your todo list at work: the different items on that list most likely differ in length, characteristic, and type of activity that has to be done.

A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, dataframes, even other lists etc. It is not even required that these objects are related to each other in any way.

### Creating a list

To construct a list you use the function list():

my_list ← list(comp1, comp2 ...)

The arguments to the list function are the list components. Remember, these components can be matrices, vectors, other lists, ....

### Creating a named list

Just like on your todo list, you want to avoid not knowing or remembering what the components of your list stand for. That is why you should give names to them:

my_list ← list(name1 = your_comp1,

name2 = your_comp2)

This creates a list with components that are named name1, name2, and so on. If you want to name your lists after you've created them, you can use the names() function as you did with vectors. The following commands are fully equivalent to the assignment above:

my_list ← list(your_comp1, your_comp2)

names(my_list) ← c("name1", "name2")

### Selecting elements from a list

Your list will often be built out of numerous elements and components. Therefore, getting a single element, multiple elements, or a component out of it is not always straightforward.

One way to select a component is using the numbered position of that component. For example, to "grab" the first component of shining_list you type

shining_list[[1]]

A quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ].

You can also refer to the names of the components, with [[ ]] or with the $ sign. Both will select the data frame representing the reviews:

shining_list[["reviews"]]

shining_list$reviews

Besides selecting components, you often need to select specific elements out of these components. For example, with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), the first element ([1]).
